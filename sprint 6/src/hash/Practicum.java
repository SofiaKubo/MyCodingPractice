package hash;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import java.util.Map;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;

/*public class Practicum {
    public static void main(String[] args) {
        // —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∂–∏—Ç–µ–ª–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
        Map<String, Integer> citiesPopulation = new HashMap<>();
        citiesPopulation.put("–ú–æ—Å–∫–≤–∞", 12_655_050);
        citiesPopulation.put("–õ–æ–Ω–¥–æ–Ω", 8_961_989);
        citiesPopulation.put("–ù—å—é-–ô–æ—Ä–∫", 8_804_190);

        // –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –ü–∞—Ä–∏–∂–∞ —á–µ—Ä–µ–∑ –≥–æ–¥
        String city = "–ü–∞—Ä–∏–∂";
        if (citiesPopulation.containsKey(city)) {
            Integer cityPopulation = citiesPopulation.get(city);
            System.out.println("–ß–µ—Ä–µ–∑ 1 –≥–æ–¥ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ " + city + " –±—É–¥–µ—Ç: " + (int)(cityPopulation * 1.01));
        }
    }
}*/


/*
public class Practicum {
    public static void main(String[] args) {
        // –∫–ª—é—á ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –∏–ª–∏ –µ—â—ë –Ω–µ—Ç
        Map<String, Boolean> todos = new HashMap<>();

        todos.put("–í—ã—É—á–∏—Ç—å Java", true);
        todos.put("–ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å–Ω—É—é —Ä–∞–±–æ—Ç—É", false);
       // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        todos.clear();

        System.out.println("Todo-—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç? –û—Ç–≤–µ—Ç: " + todos.isEmpty());// –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
    }
}*/



/*
public class Practicum {
    public static void main(String[] args) {
        Map<String, Integer> food = new HashMap<>();

        // –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã
        food.put("–Ø–±–ª–æ–∫–∏", 52);
        food.put("–ê–≤–æ–∫–∞–¥–æ", 160);
        food.put("–ú–æ–ª–æ–∫–æ", 50);
        food.put("–°—ã—Ä", 357);
        food.put("–ü–∏—Ü—Ü–∞", 275);

        // –≤—ã–≤–µ–¥–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        System.out.println("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞: " + food + ".");

        // –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ
        boolean hasApples = food.containsKey("–Ø–±–ª–æ–∫–∏");
        System.out.println("–ê —É –Ω–∞—Å –µ—Å—Ç—å —è–±–ª–æ–∫–∏? ü§î –û—Ç–≤–µ—Ç: " + hasApples + " ü•≥.");

        boolean hasCoconuts = food.containsKey("–ö–æ–∫–æ—Å");
        System.out.println("–ê —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–∫–æ—Å—ã? ü§î –û—Ç–≤–µ—Ç: " + hasCoconuts + " üò±. –°—Ä–æ—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–∫–æ—Å–æ–≤—ã–π –æ—Ç—Ä—è–¥!");

        // –∞ —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ –ø–∏—Ü—Ü–µ? –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º ...
        int caloriesInPizza = food.get("–ü–∏—Ü—Ü–∞");
        System.out.println("–ü–∏—Ü—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç " + caloriesInPizza + " –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 100 –≥.");

        // —Ö–º, –∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ? –°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º ...
        System.out.println("–°–µ–π—á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ " + food.size() + " –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");

        // –∞ –Ω–µ —Å—ä–µ—Å—Ç—å –ª–∏ —è–±–ª–æ–∫–æ?
        food.remove("–Ø–±–ª–æ–∫–∏");
        System.out.println("–°–µ–π—á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ " + food.size() + " –ø—Ä–æ–¥—É–∫—Ç–∞. –ö–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã! üõí");

        // –≤—ã–≤–µ–¥–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        for (Map.Entry<String, Integer> entry : food.entrySet()) {
            System.out.println("'" + entry.getKey() + "' —Å–æ–¥–µ—Ä–∂–∏—Ç " + entry.getValue() + " –∫–∞–ª–æ—Ä–∏–π –≤ 100 –≥.");
        }

        food.clear(); // —É–¥–∞–ª–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã

        // –∫–æ–≥–¥–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –ø—É—Å—Ç–æ ...
        System.out.println("–°–µ–π—á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ " + food.size() + " –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");

        if (food.isEmpty()) {
            System.out.println("–ù–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å! –°—Ä–æ—á–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É!");
        } else {
            System.out.println("–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ!");
        }
    }
}*/




/*
public class Practicum {
    public static void main(String[] args) {
        Map<User, List<String>> userOrders = new HashMap<User, List<String>>();

        userOrders.put(
                new User(97457, "–î–∂–æ", "joe@black.com"),
                List.of("1928873467463")
        );
        userOrders.put(
                new User(29575, "–õ–∏–∑", "liz@black.com"),
                List.of(
                        "9828674982082",
                        "7249804867520"
                )
        );
        userOrders.put(
                new User(57860, "–Ø–Ω", "yan@black.com"),
                List.of("4758039927678")
        );

        System.out.println("–ó–∞–∫–∞–∑—ã: " + userOrders);
    }
}

class User {
    Integer id;
    String name;
    String email;

    public User(Integer id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        User user = (User) o;

        return id.equals(user.id);
    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }

    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                '}';
    }
}*/

/*
public class Practicum {
    // –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏—Ö –±–æ–ª—å—à–µ)
    private static List<String> passengerNames = List.of(
            "–í–∞—Å–∏–ª–∏–π –ü–µ—Ç—Ä–æ–≤",
            "–ê–Ω–Ω–∞ –Ø–≥–∏—Ä—Å–∫–∞—è",
            "–í–∏–∫—Ç–æ—Ä–∏—è –°–æ—Ç–æ–≤–∞",
            "–ò–≥–æ—Ä—å –°–µ—Ä–æ–≤",
            "–õ—é–¥–º–∏–ª–∞ –£–ª—å—è–Ω–æ–≤–∞"
    );

    public static void main(String[] args) {
        Map<String, Integer> seats = assignSeats(passengerNames);
        System.out.println("–ú–µ—Å—Ç–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: " + seats);
    }

    public static Map<String, Integer> assignSeats(List<String> passengerNames) {
        // –¢—É—Ç –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –º–µ—Å—Ç–∞ –≤ —Å–∞–º–æ–ª—ë—Ç–µ ‚úàÔ∏è
        Map<String, Integer> seats = new HashMap<>();
        for (int i = 0; i < passengerNames.size(); i++) {
            seats.put(passengerNames.get(i), (i + 1));
        }
        return seats;
    }
}*/

/*public class Practicum {
    // –°–æ–∑–¥–∞–¥–∏–º —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.
    // –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –±—É–¥–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.
    // –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    private Map<String, Integer> orders = new HashMap<>();

    public static void main(String[] args) {
        Practicum pizzeria = new Practicum();
        pizzeria.openPizzeria();
        pizzeria.printStatistics();
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã! üçï
    private void openPizzeria() {
        newOrder("–õ–µ–æ–Ω–∞—Ä–¥–æ");
        newOrder("–î–æ–Ω–∞—Ç–µ–ª–ª–æ");
        newOrder("–†–∞—Ñ–∞—ç–ª—å");
        newOrder("–õ–µ–æ–Ω–∞—Ä–¥–æ");
        newOrder("–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ");
        newOrder("–®—Ä–µ–¥–¥–µ—Ä");
        newOrder("–î–æ–Ω–∞—Ç–µ–ª–ª–æ");
    }

    private void newOrder(String clientName) {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É. –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        // –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É—á–µ—Å—Ç—å –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã —Ä–∞–Ω–µ–µ.
        int counter = orders.getOrDefault(clientName, 1);
        if (orders.containsKey(clientName)) {
            counter++;
        }
        orders.put(clientName, counter);
    }

    private void printStatistics() {
        // –í—ã–≤–µ–¥–∏—Ç–µ —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤.
        //
        // –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å:
        //     –ó–∞–∫–∞–∑–æ–≤ –æ—Ç –ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ: 15
        //     –ó–∞–∫–∞–∑–æ–≤ –æ—Ç –õ–µ–æ–Ω–∞—Ä–¥–æ: 4
        //     –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: 19

        for (Map.Entry<String, Integer> entry : orders.entrySet()) {
            System.out.println("–ó–∞–∫–∞–∑–æ–≤ –æ—Ç " + entry.getKey() + ": " + entry.getValue());
        }

        int sum = 0;

        for (Integer value : orders.values()) {
            sum += value;
        }
        System.out.println("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: " + sum);
    }
}*/

/*public class Practicum {
    public static void main(String[] args) {
        // –∫–ª—é—á ‚Äì –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Ü–µ–Ω–∞
        Map<Car, Integer> cars = new TreeMap<>();

        // —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏
        cars.put(new Car("Audi A6", 3_760_000), 2);
        cars.put(new Car("Honda CR-V ", 2_500_000), 3);
        cars.put(new Car("KIA Cerato", 1_300_000), 8);
        cars.put(new Car("Volkswagen Tiguan", 1_935_000), 5);

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        for (Car car : cars.keySet()) {
            System.out.println(car);
        }
    }
}

class Car implements Comparable<Car> {
    String model;
    Integer priceInRubles;

    public Car(String model, Integer priceInRubles) {
        this.model = model;
        this.priceInRubles = priceInRubles;
    }

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Car car = (Car) o;

        return model.equals(car.model);
    }

    public int hashCode() {
        return model.hashCode();
    }

    public String toString() {
        return "Car{model=" + model + ", priceInRubles=" + priceInRubles + "}";
    }

    @Override
    public int compareTo(Car o) {
        return this.priceInRubles - o.priceInRubles;
    }
}*/

/*public class Practicum {
    public static void main(String[] args) {
        List<String> actorsList = new ArrayList<>();
        fillActors(actorsList);

        Map<String, Integer> actorsMap = new LinkedHashMap<>();
        // –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É
        for (String actor : actorsList) {
            actorsMap.put(actor, actorsMap.getOrDefault(actor, 0) + 1);
        }

        for (Map.Entry<String, Integer> entry : actorsMap.entrySet()) {
            String actor = entry.getKey();
            int filmsCount = entry.getValue();
            System.out.println(actor + " —Å–Ω—è–ª—Å—è –≤ " + filmsCount + " —Ñ–∏–ª—å–º–∞—Ö");
        }
    }

    private static void fillActors(List<String> actors) {
        actors.add("–®–æ–Ω –ö–æ–Ω–Ω–µ—Ä–∏");     // 1962 –î–æ–∫—Ç–æ—Ä –ù–æ—É
        actors.add("–®–æ–Ω –ö–æ–Ω–Ω–µ—Ä–∏");     // 1963 –ò–∑ –†–æ—Å—Å–∏–∏ —Å –ª—é–±–æ–≤—å—é
        actors.add("–®–æ–Ω –ö–æ–Ω–Ω–µ—Ä–∏");     // 1964 –ì–æ–ª–¥—Ñ–∏–Ω–≥–µ—Ä
        actors.add("–®–æ–Ω –ö–æ–Ω–Ω–µ—Ä–∏");     // 1965 –®–∞—Ä–æ–≤–∞—è –º–æ–ª–Ω–∏—è
        actors.add("–®–æ–Ω –ö–æ–Ω–Ω–µ—Ä–∏");     // 1967 –ñ–∏–≤—ë—à—å —Ç–æ–ª—å–∫–æ –¥–≤–∞–∂–¥—ã
        actors.add("–î–∂–æ—Ä–¥–∂ –õ—ç–∑–µ–Ω–±–∏");  // 1969 –ù–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Å–ª—É–∂–±–µ –ï—ë –í–µ–ª–∏—á–µ—Å—Ç–≤–∞
        actors.add("–®–æ–Ω –ö–æ–Ω–Ω–µ—Ä–∏");     // 1971 –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç—ã –Ω–∞–≤—Å–µ–≥–¥–∞
        actors.add("–†–æ–¥–∂–µ—Ä –ú—É—Ä");      // 1973 –ñ–∏–≤–∏ –∏ –¥–∞–π —É–º–µ—Ä–µ—Ç—å
        actors.add("–†–æ–¥–∂–µ—Ä –ú—É—Ä");      // 1974 –ß–µ–ª–æ–≤–µ–∫ —Å –∑–æ–ª–æ—Ç—ã–º –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–º
        actors.add("–†–æ–¥–∂–µ—Ä –ú—É—Ä");      // 1977 –®–ø–∏–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è –ª—é–±–∏–ª
        actors.add("–†–æ–¥–∂–µ—Ä –ú—É—Ä");      // 1979 –õ—É–Ω–Ω—ã–π –≥–æ–Ω—â–∏–∫
        actors.add("–†–æ–¥–∂–µ—Ä –ú—É—Ä");      // 1981 –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–≤–æ–∏—Ö –≥–ª–∞–∑
        actors.add("–†–æ–¥–∂–µ—Ä –ú—É—Ä");      // 1983 –û—Å—å–º–∏–Ω–æ–∂–∫–∞
        actors.add("–†–æ–¥–∂–µ—Ä –ú—É—Ä");      // 1985 –í–∏–¥ –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ
        actors.add("–¢–∏–º–æ—Ç–∏ –î–∞–ª—Ç–æ–Ω");   // 1987 –ò—Å–∫—Ä—ã –∏–∑ –≥–ª–∞–∑
        actors.add("–¢–∏–º–æ—Ç–∏ –î–∞–ª—Ç–æ–Ω");   // 1989 –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ
        actors.add("–ü–∏—Ä—Å –ë—Ä–æ—Å–Ω–∞–Ω");    // 1995 –ó–æ–ª–æ—Ç–æ–π –≥–ª–∞–∑
        actors.add("–ü–∏—Ä—Å –ë—Ä–æ—Å–Ω–∞–Ω");    // 1997 –ó–∞–≤—Ç—Ä–∞ –Ω–µ —É–º—Ä—ë—Ç –Ω–∏–∫–æ–≥–¥–∞
        actors.add("–ü–∏—Ä—Å –ë—Ä–æ—Å–Ω–∞–Ω");    // 1999 –ò —Ü–µ–ª–æ–≥–æ –º–∏—Ä–∞ –º–∞–ª–æ
        actors.add("–ü–∏—Ä—Å –ë—Ä–æ—Å–Ω–∞–Ω");    // 2002 –£–º—Ä–∏, –Ω–æ –Ω–µ —Å–µ–π—á–∞—Å
        actors.add("–î—ç–Ω–∏–µ–ª –ö—Ä–µ–π–≥");    // 2006 –ö–∞–∑–∏–Ω–æ ¬´–†–æ—è–ª—å¬ª
        actors.add("–î—ç–Ω–∏–µ–ª –ö—Ä–µ–π–≥");    // 2008 –ö–≤–∞–Ω—Ç –º–∏–ª–æ—Å–µ—Ä–¥–∏—è
        actors.add("–î—ç–Ω–∏–µ–ª –ö—Ä–µ–π–≥");    // 2012 007: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ¬´–°–∫–∞–π—Ñ–æ–ª–ª¬ª
        actors.add("–î—ç–Ω–∏–µ–ª –ö—Ä–µ–π–≥");    // 2015 007: –°–ø–µ–∫—Ç—Ä
        actors.add("–î—ç–Ω–∏–µ–ª –ö—Ä–µ–π–≥");    // 2021 –ù–µ –≤—Ä–µ–º—è —É–º–∏—Ä–∞—Ç—å
    }
}*/

/*
class Practicum {
    private static Map<Long, User> users = new HashMap<>();

    public static void main(String[] args) {
        // —Å–æ–∑–¥–∞–¥–∏–º 1 –º–∏–ª–ª–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (long i = 1; i <= 1_000_000L; i++) {
            users.put(i, new User(i, "–ò–º—è " + i));
        }

        final long startTime = System.nanoTime();
        User user = findUser(378_366L);
        final long endTime = System.nanoTime();

        System.out.println("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user);
        System.out.println("–ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª " + (endTime - startTime) + " –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥.");
    }

    private static User findUser(Long userId) {
        return users.get(userId);
    }

    static class User {
        Long id;
        String name;

        public User(Long id, String name) {
            this.id = id;
            this.name = name;
        }

        public String toString() {
            return "User{id=" + id + ", name='" + name + "'}";
        }
    }
}
*/

/*
class Practicum {
    private static List<String> allPurchases = List.of(
            "—è–±–ª–æ–∫–∏",
            "–º–æ–ª–æ–∫–æ",
            "–∫–æ–ª–±–∞—Å–∞",
            "–æ–≥—É—Ä—Ü—ã",
            "—Å–æ–∫",
            "—Ö–ª–µ–±",
            "–≤–∏–Ω–æ–≥—Ä–∞–¥",
            "–º–æ–ª–æ–∫–æ",
            "–π–æ–≥—É—Ä—Ç",
            "—Ö–ª–µ–±",
            "–ø–µ–ª—å–º–µ–Ω–∏"
    );

    public static void main(String[] args) {
        // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è uniquePurchases –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        Set<String> uniquePurchases = findUniquePurchases(allPurchases);

        // –¥–æ–ø–∏—à–∏—Ç–µ –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        System.out.println( "–ó–∞ –º–µ—Å—è—Ü –±—ã–ª–æ –∫—É–ø–ª–µ–Ω–æ " + uniquePurchases.size() + " —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.");
    }

    // —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
    public static Set<String> findUniquePurchases(List<String> allPurchases) {
        Set<String> uniquePurchases = new HashSet<>(allPurchases);
        return uniquePurchases;
    }
}*/

/*
public class Practicum {
    public static void main(String[] args) {
        List<String> names = new ArrayList<>();
        fillNames(names);
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º—ë–Ω: " + names.size());

        Set<String> uniqueNames = new HashSet<>(names);
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º—ë–Ω: " + uniqueNames.size());
    }

    private static void fillNames(List<String> names) {
        names.add("–ú–∞–∫—Å–∏–º");
        names.add("–°–≤–µ—Ç–ª–∞–Ω–∞");
        names.add("–ò–≤–∞–Ω");
        names.add("–û–ª—å–≥–∞");
        names.add("–ú–∞–∫—Å–∏–º");
        names.add("–ü—ë—Ç—Ä");
        names.add("–û–ª–µ–≥");
        names.add("–ò–≤–∞–Ω");
        names.add("–û–ª—å–≥–∞");
        names.add("–ò—Ä–∏–Ω–∞");
    }
}*/

import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;

/*
public class Practicum {
    public static void main(String[] args) {
        Set<String> songs = new LinkedHashSet<>();
        fillSongs(songs);

        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω: " + songs.size());

        System.out.println("–ü–µ—Å–Ω–∏:");
        for (String song : songs) {
            System.out.println("  * " + song);
        }

    }

    private static void fillSongs(Set<String> songs) {
        songs.add("Sting ‚Äì Shape Of My Heart");
        songs.add("Gorillaz ‚Äì Clint Eastwood");
        songs.add("Lady Gaga ‚Äì Bad Romance");
        songs.add("Taylor Swift ‚Äì Wildest Dreams");
        songs.add("Ariana Grande ‚Äì 7 rings");
        songs.add("Depeche Mode ‚Äì Personal Jesus");
        songs.add("Gorillaz ‚Äì Clint Eastwood");
        songs.add("Lady Gaga ‚Äì Bad Romance");
        songs.add("Bruno Mars ‚Äì Talking To The Moon");
        songs.add("Taylor Swift ‚Äì Wildest Dreams");
    }
}*/

/*
public class Practicum {
    public static void main(String[] args) {
        Comparator<Ticket> comparator = new Comparator<Ticket>() {
            @Override
            public int compare(Ticket o1, Ticket o2) {
                return o1.priceInUsd - o2.priceInUsd;
            }
        };

        Set<Ticket> tickets = new TreeSet<>(comparator);
        fillTickets(tickets);

        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã: ");
        for (Ticket ticket : tickets) {
            System.out.println("  * " + ticket);
        }
    }

    private static void fillTickets(Set<Ticket> tickets) {
        tickets.add(new Ticket("–õ–æ–Ω–¥–æ–Ω", "–ü–∞—Ä–∏–∂", 376));
        tickets.add(new Ticket("–ú–∏–ª–∞–Ω", "–ú–æ—Å–∫–≤–∞", 298));
        tickets.add(new Ticket("–ë–µ—Ä–ª–∏–Ω", "–ë–æ—Å—Ç–æ–Ω", 1273));
        tickets.add(new Ticket("–ü–µ–∫–∏–Ω", "–†–∏–º", 846));
        tickets.add(new Ticket("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ê—Ñ–∏–Ω—ã", 284));
        tickets.add(new Ticket("–°–∏–¥–Ω–µ–π", "–¢–æ–∫–∏–æ", 1738));
        tickets.add(new Ticket("–ú—é–Ω—Ö–µ–Ω", "–î—É–±–∞–π", 974));
    }

    public static class Ticket {
        public String from;
        public String to;
        public int priceInUsd;

        public Ticket(String from, String to, int priceInUsd) {
            this.from = from;
            this.to = to;
            this.priceInUsd = priceInUsd;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Ticket ticket = (Ticket) o;

            if (priceInUsd != ticket.priceInUsd) return false;
            if (!from.equals(ticket.from)) return false;
            if (!to.equals(ticket.to)) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = from.hashCode();
            result = 31 * result + to.hashCode();
            result = 31 * result + priceInUsd;
            return result;
        }

        @Override
        public String toString() {
            return "Ticket{from=" + from + ", to=" + to + ", priceInUsd=" + priceInUsd + '}';
        }
    }
}*/

public class Practicum {
    private static Set<Letter> letters = new LinkedHashSet<>();

    public static void main(String[] args) {
        // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Å—å–º–∞—Ö (–≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É)
        letters.add(new Letter("–î–∂–æ–Ω –°–º–∏—Ç", LocalDate.of(2021, 7, 7), "—Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ ‚Ññ1 ..."));
        letters.add(new Letter("–ê–º–∞–Ω–¥–∞ –õ–∏–Ω—Å", LocalDate.of(2021, 6, 17), "—Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ ‚Ññ2 ..."));
        letters.add(new Letter("–î–∂–æ –ö—å—é", LocalDate.of(2021, 7, 5), "—Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ ‚Ññ3 ..."));
        letters.add(new Letter("–ú–∏—à–µ–ª—å –§–µ—Ä–Ω–∞–Ω–¥–µ—Å", LocalDate.of(2021, 8, 23), "—Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ ‚Ññ4 ..."));

        printOrderedById(letters);
        printOrderedByDateReceived(letters);
    }

    private static void printOrderedById(Set<Letter> letters) {
        System.out.println("–í—Å–µ –ø–∏—Å—å–º–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ ID: ");

        for (Letter letter : letters) {
            System.out.println("    * –ü–∏—Å—å–º–æ –æ—Ç " + letter.authorName + " –ø–æ—Å—Ç—É–ø–∏–ª–æ " + letter.dateReceived);
        }
    }

    private static void printOrderedByDateReceived(Set<Letter> letters) {
        System.out.println("–í—Å–µ –ø–∏—Å—å–º–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è: ");

        // —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        Set<Letter> letterSet = new TreeSet<>(Comparator.comparing(l -> l.dateReceived));
        letterSet.addAll(letters);

        for (Letter letter : letterSet) {
            System.out.println("    * –ü–∏—Å—å–º–æ –æ—Ç " + letter.authorName + " –ø–æ—Å—Ç—É–ø–∏–ª–æ " + letter.dateReceived);
        }
    }

    static class Letter {
        public String authorName;      // –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        public LocalDate dateReceived; // –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞
        public String text;            // —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞

        public Letter(String senderName, LocalDate dateReceived, String text) {
            this.authorName = senderName;
            this.dateReceived = dateReceived;
            this.text = text;
        }
    }
}